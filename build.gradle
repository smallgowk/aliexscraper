plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
}

group 'com.phanduy.aliexscrap'
version '1.0.2'

task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/app.properties").withWriter { w ->
      Properties p = new Properties()
      p['version'] = project.version.toString()
      p.store w, null
    }
  }
}

classes {
  dependsOn createProperties
}

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

// Th√™m task n√†y v√†o build.gradle ƒë·ªÉ check modules
task checkModules {
  doLast {
    println "Checking module dependencies..."

    configurations.runtimeClasspath.files.each { file ->
      if (file.name.endsWith('.jar')) {
        try {
          def jarFile = new java.util.jar.JarFile(file)
          def moduleInfo = jarFile.getEntry('module-info.class')
          if (moduleInfo != null) {
            println "‚úì Modular JAR: ${file.name}"
          } else {
            def automaticModuleName = jarFile.manifest?.mainAttributes?.getValue('Automatic-Module-Name')
            if (automaticModuleName) {
              println "üì¶ Automatic Module: ${file.name} -> ${automaticModuleName}"
            } else {
              println "‚ùå Non-modular JAR: ${file.name}"
            }
          }
          jarFile.close()
        } catch (Exception e) {
          println "‚ö†Ô∏è  Cannot read: ${file.name} - ${e.message}"
        }
      }
    }
  }
}

application {
  mainModule = 'com.phanduy.aliexscrap.aliexscrapper'
  mainClass = 'com.phanduy.aliexscrap.AliexScrapperClientApp'
  applicationDefaultJvmArgs = [
          '--add-modules', 'javafx.controls,javafx.fxml',
          '--add-opens', 'javafx.controls/javafx.scene.control=ALL-UNNAMED'
  ]
}

javafx {
  version = '17.0.10'
  modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

dependencies {
  // WebP ImageIO support
  implementation files('libs/webp-imageio-core-0.1.3.jar')

  // JavaFX
  implementation("org.openjfx:javafx-controls:17.0.10")
  implementation("org.openjfx:javafx-fxml:17.0.10")
  implementation("org.openjfx:javafx-web:17.0.10")
  implementation("org.openjfx:javafx-swing:17.0.10")

  // UI Theme
  implementation 'org.jfxtras:jmetro:11.6.15'

  // UI Libraries
  implementation("org.controlsfx:controlsfx:11.1.2")
  implementation("com.dlsc.formsfx:formsfx-core:11.3.2")
  implementation("net.synedra:validatorfx:0.4.0")
  implementation("org.kordamp.ikonli:ikonli-javafx:12.3.1")
  implementation("org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0")
  implementation("eu.hansolo:tilesfx:11.48")

  // HTTP Client & JSON
  implementation("com.squareup.okhttp3:okhttp:4.12.0")
  implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
  implementation('org.json:json:20231013')
  implementation("com.fasterxml.jackson.core:jackson-databind:2.17.0")
  implementation("com.squareup.retrofit2:retrofit:2.9.0")
  implementation("com.squareup.retrofit2:converter-gson:2.9.0")

  // Excel Processing
  implementation('org.apache.poi:poi-ooxml:5.4.0')
  implementation("org.apache.commons:commons-collections4:4.4")
  implementation('org.apache.commons:commons-compress:1.26.0')

  // XML Processing
  implementation("javax.xml.bind:jaxb-api:2.3.1")

  // HTML Parsing (JSoup only - no Selenium)
  implementation('org.jsoup:jsoup:1.15.3')

  // Database
  implementation("org.xerial:sqlite-jdbc:3.45.1.0")

  // JSON Processing
  implementation("com.google.code.gson:gson:2.10.1")

  // Logging
  implementation group: 'log4j', name: 'log4j', version: '1.2.17'

  // Test dependencies
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

  // Java-WebSocket
  implementation 'org.java-websocket:Java-WebSocket:1.6.0'
}

test {
  useJUnitPlatform()
}

// Simplified jlink config without Selenium conflicts
jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  mergedModule {
    requires 'com.google.gson'
    requires 'java.logging'
    requires 'jdk.crypto.ec'
  }
  launcher {
    name = 'app'
  }
  jpackage {
    imageName = 'AliexScrap'
    installerName = 'AliexScrapInstaller'
    installerType = 'exe'
    icon = file('src/main/resources/image/aliexscrap.ico').absolutePath
    appVersion = version
    installerOptions = [
            '--win-menu',
            '--win-shortcut',
            '--win-dir-chooser'
    ]
  }
}

jlinkZip {
  group = 'distribution'
}